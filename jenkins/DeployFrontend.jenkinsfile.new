@Library('datacommons-jenkins-shared-library@v1.1') _

pipeline {
	agent {
		node {
			//label 'ctdc-docker'
			label 'crdc-dh-docker'
		}
	}

	parameters {

        string(
	        defaultValue: '',
		    description: 'The image tag to deploy',
		    name: 'ImageTag')

		extendedChoice(
            name: 'Environment',
            defaultValue: 'dev',
            description: 'Choose the environment to deploy to',
            type: 'PT_SINGLE_SELECT',
            value: 'dev,qa,stage,prod')

  }

  options {
  	ansiColor('xterm')
	timestamps()
  }

  environment {

      PROJECT      = 'crdc-dh'
        APP          = "frontend"
        SLACK_SECRET = "crdcdh_slack_url"
        REGION       = "us-east-1"
        ECR_REPO     = "crdc-dh-frontend"
        DEPLOY_REPO  = "${env.PROJECT}-deployments"
        IMAGE_TAG    = "${params.ImageTag}"
        ENV          = "${params.Environment}"
        CLUSTER      = "${env.PROJECT}-${env.ENV}-ecs"
        SERVICE      = "${env.PROJECT}-${env.ENV}-${env.APP}"

  }

  stages{
  	stage('checkout'){
  		steps {

  		checkout([$class: 'GitSCM',
			branches: [[name: '*/main']],
                        extensions: [[$class: 'SubmoduleOption',
                        recursiveSubmodules: true],
                        [$class: 'RelativeTargetDirectory',
                        relativeTargetDir: 'crdc-dh-deployments']],
                        userRemoteConfigs:
                        [[url: 'https://github.com/CBIIT/crdc-dh-deployments.git']]])

        checkout([$class: 'GitSCM',
                        branches: [[name: "${env.ENV}"]],
                        extensions: [[$class: 'SubmoduleOption',
                        recursiveSubmodules: true],
                        [$class: 'RelativeTargetDirectory',
                        relativeTargetDir: ""${env.PROJECT}-deployments-${env.ENV}"]],
                        userRemoteConfigs:
			[[url: 'https://github.com/CBIIT/crdc-dh-deployments.git']]])

        }

  	}

  	stage('Deploy'){

        agent {
            docker {
                image 'cbiitssrepo/cicd-ansible_4.0'
                args '--net=host -u root -v /var/run/docker.sock:/var/run/docker.sock'
                reuseNode true
            }
        }

	    environment {
            FE_VERSION = "${params.ImageTag}"
            BE_VERSION = getVersion(service: "backend",deploymentFile: "${PROJECT}-deployments/deployments.yaml")
        }

 		steps {

			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
                ansiblePlaybook(
					playbook: "${WORKSPACE}/playbooks/ansible/playbooks/deploy-frontend-microservice.yml", 
            		inventory: "${WORKSPACE}/playbooks/ansible/playbooks/hosts",
                    extraVars: [
                        tier: "${params.Environment}",
						project_name: "${PROJECT}",
						iam_prefix: "power-user",
						subdomain: "datahub",
						domain_name: "datacommons.cancer.gov",
						auth_enabled: false
						],
                    colorized: true)
 			}

 		}

  	}

  }

  post {

    always {

        notify(
            secretPath: "notification/slack",
            secretName: "${env.SLACK_SECRET}"
        ) 

    }

    cleanup {

        cleanWs()

    }

  }

}
