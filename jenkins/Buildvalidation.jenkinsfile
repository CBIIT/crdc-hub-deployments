@Library('datacommons-jenkins-shared-library@v1.1')_

pipeline {
	agent {
		node {
			label 'crdc-dh-docker'
		}
	}

	parameters {

        extendedChoice(
            name: 'Environment',
            defaultValue: 'dev',
            description: 'Choose the environment to build',
            type: 'PT_SINGLE_SELECT',
            value: 'dev,dev2,qa,qa2,stage,prod')

        gitParameter(branchFilter: 'origin/(.*)',
            defaultValue: 'master',
            name: 'CodeBranch',
            type: 'GitParameterDefinition',
            quickFilterEnabled: true,
            selectedValue: 'DEFAULT',
            sortMode: 'ASCENDING_SMART',
            tagFilter: '*',
            useRepository: 'https://github.com/CBIIT/crdc-datahub-validator')

        booleanParam(
            defaultValue: true,
            name: 'UpdateDeploymentVersion')

        booleanParam(
            defaultValue: true,
            name: 'RunDeployStage')

  }

  options {
  	ansiColor('xterm')
	timestamps()
  }

  environment {

      PROJECT      = "crdc-hub"
	  SERVICE1      = "filevalidation"
	  SERVICE2      = "essentialvalidation"
	  SERVICE3      = "metadatavalidation"
	  ECR_REPO1     = "crdc-hub-filevalidation"
	  ECR_REPO2     = "crdc-hub-essentialvalidation"
	  ECR_REPO3     = "crdc-hub-metadatavalidation"
	  DEPLOY_JOB1   = "DeployFilevalidation"
	  DEPLOY_JOB2   = "DeployEssentialvalidation"
	  DEPLOY_JOB3   = "DeployMetadatavalidation"
	  SLACK_SECRET = "crdcdh_slack_url"
	  CODE_REPO    = "crdc-datahub-validator"
	  JOB_PATH     = "_default/_lower/CRDC-DH/_jobs"
	  REGION       = "us-east-1"
	  DEPLOY_REPO  = "${env.PROJECT}-deployments"
      CODE_BRANCH  = "${params.CodeBranch}"
      CODE_FOLDER  = "${env.PROJECT}-validation"
  }

  stages{
  	stage('checkout'){
  		steps {

		checkout([$class: 'GitSCM',
                        branches: [[name: "${env.CODE_BRANCH}"]],
                        extensions: [[$class: 'SubmoduleOption',
                        recursiveSubmodules: true],
                        [$class: 'RelativeTargetDirectory',
                        relativeTargetDir: "${env.CODE_FOLDER}"]],
                        userRemoteConfigs:
                        [[url: "https://github.com/CBIIT/${env.CODE_REPO}"]]])

  		checkout([$class: 'GitSCM',
                         branches: [[name: "${params.Environment}"]],
                        extensions: [[$class: 'SubmoduleOption',
                        recursiveSubmodules: true],
                        [$class: 'RelativeTargetDirectory',
                        relativeTargetDir: "${env.PROJECT}-deployments"]],
                        userRemoteConfigs:
                        [[url: "https://github.com/CBIIT/${env.DEPLOY_REPO}"]]])

        }

  	}

        stage('Set Environment Variables'){
 		steps {
 			script {
                // set ECR account number
				env.ECR_ACCOUNT = sh(label: 'Get ECR account', returnStdout: true, script: "aws secretsmanager get-secret-value --region $REGION --secret-id ecr --query SecretString --output text | jq -r '.central_account_id'").trim()
				// set repo URL
				env.REGISTRY_URL = "${ECR_ACCOUNT}.dkr.ecr.${REGION}.amazonaws.com"
			}
 		}
  	}

  	stage('Build1'){

              when {
                 expression {params.BuildFilevalidation}  
                   }
 		steps {

 			script {

			    sh label: 'Docker-Build', script: '''#!/bin/bash

				# build CRDC DH Docker container
				echo "Building: $ECR_REPO1:$CODE_BRANCH.$BUILD_NUMBER"
				aws_account=$(aws sts get-caller-identity --query "Account" --output text)
				repo_url1="$REGISTRY_URL/$ECR_REPO1"

				cd $WORKSPACE/$CODE_FOLDER && DOCKER_BUILDKIT=1 docker build --no-cache -t $repo_url1:$CODE_BRANCH.$BUILD_NUMBER -f $WORKSPACE/$CODE_FOLDER/filevalidation.dockerfile .

				'''

			}

 		}
       }
     
      stage('Build2'){

           when {
                 expression {params.BuildEssentialvalidation}
                   }
                steps {

                        script {

                            sh label: 'Docker-Build', script: '''#!/bin/bash

                                # build CRDC DH Docker container
                                echo "Building: $ECR_REPO2:$CODE_BRANCH.$BUILD_NUMBER"
                                aws_account=$(aws sts get-caller-identity --query "Account" --output text)
                                repo_url2="$REGISTRY_URL/$ECR_REPO2"

                                cd $WORKSPACE/$CODE_FOLDER && DOCKER_BUILDKIT=1 docker build --no-cache -t $repo_url2:$CODE_BRANCH.$BUILD_NUMBER -f $WORKSPACE/$CODE_FOLDER/essentialvalidation.dockerfile .

                                '''

                        }

                }
         }

      stage('Build3'){
        when {
                 expression {params.BuildMetadatavalidation}
                   }
                steps {

                        script {

                            sh label: 'Docker-Build', script: '''#!/bin/bash

                                # build CRDC DH Docker container
                                echo "Building: $ECR_REPO3:$CODE_BRANCH.$BUILD_NUMBER"
                                aws_account=$(aws sts get-caller-identity --query "Account" --output text)
                                repo_url3="$REGISTRY_URL/$ECR_REPO3"

                                cd $WORKSPACE/$CODE_FOLDER && DOCKER_BUILDKIT=1 docker build --no-cache -t $repo_url3:$CODE_BRANCH.$BUILD_NUMBER -f $WORKSPACE/$CODE_FOLDER/metadatavalidation.dockerfile .

                                '''

                        }

                }

  	}

  	stage('Test'){
             when {
                expression { params.TrivyTestScan }
              }

 		steps {

 			script {

			    sh label: 'Trivy-Test', script: '''#!/bin/bash

				# Test image for vulnerabilities
                echo "Testing Image with Trivy: $ECR_REPO1:$CODE_BRANCH.$BUILD_NUMBER"
                echo "Testing Image with Trivy: $ECR_REPO2:$CODE_BRANCH.$BUILD_NUMBER"
                echo "Testing Image with Trivy: $ECR_REPO3:$CODE_BRANCH.$BUILD_NUMBER"
                aws_account=$(aws sts get-caller-identity --query "Account" --output text)
				repo_url1="$REGISTRY_URL/$ECR_REPO1"
				repo_url2="$REGISTRY_URL/$ECR_REPO2"
				repo_url3="$REGISTRY_URL/$ECR_REPO3"

                docker run --rm --name trivy -u root -v /var/run/docker.sock:/var/run/docker.sock bitnami/trivy:latest image --exit-code 1 --severity HIGH,CRITICAL $repo_url1:$CODE_BRANCH.$BUILD_NUMBER
                docker run --rm --name trivy -u root -v /var/run/docker.sock:/var/run/docker.sock bitnami/trivy:latest image --exit-code 1 --severity HIGH,CRITICAL $repo_url2:$CODE_BRANCH.$BUILD_NUMBER
                docker run --rm --name trivy -u root -v /var/run/docker.sock:/var/run/docker.sock bitnami/trivy:latest image --exit-code 1 --severity HIGH,CRITICAL $repo_url3:$CODE_BRANCH.$BUILD_NUMBER
                #trivy image --exit-code 1 --severity HIGH,CRITICAL $repo_url:$CODE_BRANCH.$BUILD_NUMBER
#                trivy image --timeout 15m --severity HIGH,CRITICAL $repo_url:$CODE_BRANCH.$BUILD_NUMBER

				'''

			}

 		}

  	}

  	stage('push to ECR1'){

             when {
               expression {params.BuildFilevalidation}
                  }
 		steps {

 			script {

			    sh label: 'Docker-Push', script: '''#!/bin/bash

				# push CRDC-DH Docker container to ECR
				echo "Pushing: $ECR_REPO1:$CODE_BRANCH.$BUILD_NUMBER"
				aws_account=$(aws sts get-caller-identity --query "Account" --output text)
				repo_url1="$REGISTRY_URL/$ECR_REPO1"

				# login and push to ECR
				docker login -u AWS -p $(aws ecr get-login-password --region $REGION) $repo_url1
				docker push $repo_url1:$CODE_BRANCH.$BUILD_NUMBER

                # tag as latest and push to ECR - this step is not needed here because the central ECR is being set to require tag immutability
#				docker tag $repo_url:$CODE_BRANCH.$BUILD_NUMBER $repo_url:latest
#                docker push $repo_url:latest

				'''

			}

 		}
            }

      stage('push to ECR2'){
          when {
               expression {params.BuildEssentialvalidation}
                  }
                steps {

                        script {

                            sh label: 'Docker-Push', script: '''#!/bin/bash

                                # push CRDC-DH Docker container to ECR
                                echo "Pushing: $ECR_REPO2:$CODE_BRANCH.$BUILD_NUMBER"
                                aws_account=$(aws sts get-caller-identity --query "Account" --output text)
                                repo_url2="$REGISTRY_URL/$ECR_REPO2"

                                # login and push to ECR
                                docker login -u AWS -p $(aws ecr get-login-password --region $REGION) $repo_url2
                                docker push $repo_url2:$CODE_BRANCH.$BUILD_NUMBER

                # tag as latest and push to ECR - this step is not needed here because the central ECR is being set to require tag immutability
#                               docker tag $repo_url:$CODE_BRANCH.$BUILD_NUMBER $repo_url:latest
#                docker push $repo_url:latest

                                '''

                        }

                }
            }

      stage('push to ECR3'){
        when {
               expression {params.BuildMetadatavalidation}
                  }
                steps {

                        script {

                            sh label: 'Docker-Push', script: '''#!/bin/bash

                                # push CRDC-DH Docker container to ECR
                                echo "Pushing: $ECR_REPO3:$CODE_BRANCH.$BUILD_NUMBER"
                                aws_account=$(aws sts get-caller-identity --query "Account" --output text)
                                repo_url3="$REGISTRY_URL/$ECR_REPO3"

                                # login and push to ECR
                                docker login -u AWS -p $(aws ecr get-login-password --region $REGION) $repo_url3
                                docker push $repo_url3:$CODE_BRANCH.$BUILD_NUMBER

                # tag as latest and push to ECR - this step is not needed here because the central ECR is being set to require tag immutability
#                               docker tag $repo_url:$CODE_BRANCH.$BUILD_NUMBER $repo_url:latest
#                docker push $repo_url:latest

                                '''

                        }

                }

  	}

 	stage('Update Deployment Manifest'){

		steps {
 			
			script {
                if (params.UpdateDeploymentVersion) {
                    writeDeployment(
                        version: "${env.CODE_BRANCH}.${BUILD_NUMBER}",
                        image:  "${env.CODE_BRANCH}.${BUILD_NUMBER}",
                        service: "${env.SERVICE}",
                        deploymentFile: "${env.PROJECT}-deployments/deployments.yaml",
                        deploymentRepoUrl: "https://github.com/CBIIT/${env.DEPLOY_REPO}",
                        deploymentCheckoutDirectory: "${env.PROJECT}-deployments"
                    )
                }
            }

 		}

  	}

  	stage('Update Code Tag1'){
     
            when {
               expression {params.BuildFilevalidation}
                 }
 		steps {
 			
			script {

                tagRepo ( 
                    gitTag: "${env.CODE_BRANCH}",
                    gitUrl: "github.com/CBIIT/${env.CODE_REPO}",
                    checkoutDirectory: "${env.PROJECT}-${env.SERVICE1}"
                )

            }

 		}
            }

        stage('Update Code Tag2'){
          when {
               expression {params.BuildEssentialvalidation}
                 }
                steps {

                        script {

                tagRepo (
                    gitTag: "${env.CODE_BRANCH}",
                    gitUrl: "github.com/CBIIT/${env.CODE_REPO}",
                    checkoutDirectory: "${env.PROJECT}-${env.SERVICE2}"
                )

            }

                }

            }

       stage('Update Code Tag3'){
          when {
               expression {params.BuildMetadatavalidation}
                 }
                steps {

                        script {

                tagRepo (
                    gitTag: "${env.CODE_BRANCH}",
                    gitUrl: "github.com/CBIIT/${env.CODE_REPO}",
                    checkoutDirectory: "${env.PROJECT}-${env.SERVICE3}"
                )

            }

                }

  	}

  }

  post {

    success {

		script {
			if (params.RunDeployStage) {
				echo 'Run the deployment for this sevice'
				build job: "$JOB_PATH/$DEPLOY_JOB", parameters: [string(name: 'ImageTag', value: "$CODE_BRANCH.$BUILD_NUMBER"), extendedChoice(name: 'Environment', value: "${params.Environment}")]
			}
		}
    }

    always {

        notify(
            secretPath: "notification/slack",
            secretName: "${env.SLACK_SECRET}"
        ) 

    }

    cleanup {

        cleanWs()

    }

  }

}
