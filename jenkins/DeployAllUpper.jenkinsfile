@Library('datacommons-jenkins-shared-library@v1.2') _

pipeline {
	agent {
		node {
			//label 'ctdc-docker'
			label 'crdc-dh-docker'
		}
	}

	parameters {

		extendedChoice(
            name: 'Environment',
            defaultValue: 'dev',
            description: 'Choose the environment to build',
            type: 'PT_SINGLE_SELECT',
            value: 'dev,qa,stage,prod')

  }

  options {

	timestamps()

  }

  environment {

      PROJECT      = 'crdc-hub'
	  JOB_PATH     = '_default/_upper/CRDC-DH/_jobs'
      SLACK_SECRET = "crdcdh_slack_url"

  }

  stages{
  	stage('checkout'){
  		steps {

        checkout([$class: 'GitSCM',
			branches: [[name: "${params.Environment}"]],
			doGenerateSubmoduleConfigurations: false,
			extensions: [[$class: 'RelativeTargetDirectory',
			relativeTargetDir: "${env.PROJECT}-deployments"]],
			submoduleCfg: [],
			userRemoteConfigs:
			[[url: 'https://github.com/CBIIT/crdc-hub-deployments']]])

        }

  	}

  	stage('Deploy'){

        agent {
            docker {
                image 'cbiitssrepo/cicd-ansible-8.0:latest'
                args '--net=host -u root -v /var/run/docker.sock:/var/run/docker.sock'
                reuseNode true
            }
        }

 		steps {

            script {

                def deployment = readYaml file: "${WORKSPACE}/${PROJECT}-deployments/deployments.yaml"
                def deployJobs = [:]
                deployment.services.each { service ->
                  deployJobs[service] = {
                    buildJob(
                        jobName: "${JOB_PATH}/Deploy" + "${service.key}".capitalize(),
                        parameters:[
                                string(name: 'Environment', value: params["Environment"]),
                                string(name: 'ImageTag' , value: service.value.image)
                        ]
                    )
                  }
                }
                parallel deployJobs
		    }

 		}

  	}

  }

  post {

    always {

        notify(
            secretPath: "notification/slack",
            secretName: "${env.SLACK_SECRET}"
        ) 

    }

    cleanup {

        cleanWs()

    }

  }

}
