- name: deploy backend microservice
  hosts: all
  connection: local
  gather_facts: no

  tasks:
    #install collections
    - name: install aws collection
      shell: "ansible-galaxy collection install {{ item | quote }} --force"
      loop:
        - community.docker:<=3.4.3
        - amazon.aws:<=5.4.0
        - community.aws:<=3.2.0
        #- git+https://github.com/CBIIT/datacommons-devops.git#/ansible/collections/bento/common/,main
        #- git+https://github.com/CBIIT/datacommons-devops.git#/ansible/collections/bento/common/,ctdc
        - git+https://github.com/CBIIT/datacommons-devops.git#/ansible/collections/bento/common/,v1.5

    #docker login
    - name: docker login
      include_role:
        name: bento.common.ecr_login
      vars:
        region: us-east-1

    #deploy backend
    - name: deploy stage for backend microservice
      include_role:
        name: bento.common.ecs
      vars:
        ansible_python_interpreter: /usr/bin/python3
        execution_role: "{% if iam_prefix is defined and iam_prefix != '' %}{{ iam_prefix }}-{{ project_name }}-{{ tier }}-ecs-task-execution-role{% else %}{{ project_name }}-{{ tier }}-task-execution-role{% endif %}"
        task_role: "{% if iam_prefix is defined and iam_prefix != '' %}{{ iam_prefix }}-{{ project_name }}-{{ tier }}-ecs-task-role{% else %}{{ project_name }}-{{ tier }}-task-role{% endif %}"
        project_name: "{{ project_name }}"
        platform: aws
        region: us-east-1
        service_name: "{{ project_name }}-{{ tier }}-backend"
        container_name: "backend"
        auth_enabled: "true"
        image_version: "{{ lookup('env','BE_VERSION') }}"
        tier: "{{ lookup('env','TIER') }}"
        ecs_cluster_name: "{{ project_name }}-{{ tier }}-ecs"
        mongo_db_host: "{{ lookup('amazon.aws.aws_secret', 'bento/{{ project_name }}/{{ tier }}.mongo_db_host', nested=true, region='us-east-1' ) }}"
        mongo_db_port: "{{ lookup('amazon.aws.aws_secret', 'bento/{{ project_name }}/{{ tier }}.mongo_db_port', nested=true, region='us-east-1' ) }}"
        mongo_db_password: "{{ lookup('amazon.aws.aws_secret', 'bento/{{ project_name }}/{{ tier }}.mongo_db_password', nested=true, region='us-east-1' ) }}"
        mongo_db_user: "{{ lookup('amazon.aws.aws_secret', 'bento/{{ project_name }}/{{ tier }}.mongo_db_user', nested=true, region='us-east-1' ) }}"
#        mongo_db_database: "{{ lookup('amazon.aws.aws_secret', 'bento/{{ project_name }}/{{ tier }}.mongo_db_database', nested=true, region='us-east-1' ) }}"
#        cookie_secret: "{{ lookup('amazon.aws.aws_secret', 'bento/{{ project_name }}/{{ tier }}.cookie_secret', nested=true, region='us-east-1' ) }}"
        newrelic_license_key: "{{ lookup('amazon.aws.aws_secret', 'monitoring/newrelic.api_key', nested=true, region='us-east-1' ) }}"
        sumo_collector_endpoint: "{{ lookup('amazon.aws.aws_secret', 'bento/{{ project_name }}/{{ tier }}.sumo_collector_endpoint', nested=true, region='us-east-1' ) }}"
        sumo_collector_token: "{{ lookup('amazon.aws.aws_secret', 'bento/{{ project_name }}/{{ tier }}.sumo_collector_token_backend', nested=true, region='us-east-1' ) }}"
        container_port: 8080
        container_memory: 1024
        container_cpu: 512
        container_image_url: "{{ ecr_repo }}/{{ project_name }}-{{ container_name }}"
        #Elasticsearch
        #es_host: "{{ lookup('amazon.aws.aws_secret', 'bento/{{ project_name }}/{{ tier }}.es_host', nested=true, region='us-east-1' ) }}"
        #es_schema: "{% if project_name == 'bento' %}es-schema.graphql{% else %}es-schema-{{ project_name }}.graphql{% endif %}"
        #enable_es_filter: "true"
        #Redis vars
        #enable_redis: "false"
        #redis_port: "6379"
        #use_cluster: "true"
        #redis_host: localhost
        #Entrypoint
        #container_entrypoint:
        #  - "/bin/bash"
        #  - "-c"
        #  - 'wget "https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip" -O newrelic-java.zip && rm -rf newrelic && unzip -o newrelic-java.zip && bin/catalina.sh run'
        #Environment
        container_env:
          - name: PROJECT
            value: "{{ project_name }}"
          ## Versions
          - name: VERSION
            value: "{{ image_version }}"
          ## Database
          - name: MONGO_DB_HOST
            value: "{{ mongo_db_host }}"
          - name: MONGO_DB_PORT
            value: "{{ mongo_db_port }}"
          - name: MONGO_DB_PASSWORD
            value: "{{ mongo_db_password }}"
          - name: MONGO_DB_USER
            value: "{{ mongo_db_user }}"
#          - name: MONGO_DB_DATABASE
#            value: "{{ mongo_db_database }}"
          - name: SESSION_SECRET
            value: "abcd256asghaaamnkloofghj"
          ## Email notification config
          - name: EMAILS_ENABLED
            value: "false" 
          #- name: EMAIL_SMTP_HOST
          #  value: "false" 
          #- name: EMAIL_SMTP_PORT
          #  value: "false" 
          #- name: EMAIL_USER
          #  value: "false" 
          #- name: EMAIL_PASSWORD
          #  value: "false" 
          #- name: EMAIL_URL
            #value: "false" 
          ## Opensearch
#          - name: ES_HOST
#            value: "{{ es_host }}"
#          - name: ES_SCHEMA
#            value: "{{ es_schema }}"
#          - name: ES_FILTER_ENABLED
#            value: "{{ enable_es_filter }}"
          ## Redis
#          - name: REDIS_ENABLE
#            value: "{{ enable_redis }}"
#          - name: REDIS_USE_CLUSTER
#            value: "{{ use_cluster }}"
#          - name: REDIS_HOST
#            value: "{{ redis_host }}"
#          - name: REDIS_PORT
#            value: "{{ redis_port }}"
#          - name: REDIS_FILTER_ENABLE
#            value: "false"
          ## New Relic
          - name: NEW_RELIC_LICENSE_KEY
            value: "{{ newrelic_license_key }}"
          - name: NEW_RELIC_APP_NAME
            value: "{{ project_name }}-{{ platform }}-{{ tier }}-{{ container_name }}"
          - name: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED
            value: "true"
          - name: NEW_RELIC_HOST
            value: "gov-collector.newrelic.com"
          - name: NEW_RELIC_LOG_FILE_NAME
            value: "STDOUT"
          - name: NEW_RELIC_LABELS
            value: "Project:{{ project_name }};Environment:{{ tier }}"
          ## Java
          - name: JAVA_OPTS
            value: "-javaagent:/usr/local/tomcat/newrelic/newrelic.jar"
