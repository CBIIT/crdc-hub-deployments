- name: deploy file validation service
  hosts: all
  connection: local
  gather_facts: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3
    ecs_cluster_name: "{{ project_name }}-{{ tier }}-ecs"
    execution_role: "{% if iam_prefix is defined and iam_prefix != '' %}{{ iam_prefix }}-{{ project_name }}-{{ tier }}-ecs-task-execution-role{% else %}{{ project_name }}-{{ tier }}-task-execution-role{% endif %}"
    task_role: "{% if iam_prefix is defined and iam_prefix != '' %}{{ iam_prefix }}-{{ project_name }}-{{ tier }}-ecs-task-role{% else %}{{ project_name }}-{{ tier }}-task-role{% endif %}"
    project_name: "{{ project_name }}"
    platform: aws
    region: us-east-1
    service_name: "{{ project_name }}-{{ tier }}-filevalidation"
    container_name: "filevalidation"
    image_version: "{{ lookup('env','FILEVALIDATION_VERSION') }}"
    tier: "{{ lookup('env','TIER') }}"
    newrelic_license_key: "{{ lookup('amazon.aws.aws_secret', 'monitoring/newrelic.api_key', nested=true, region='us-east-1' ) }}"
    sumo_collector_endpoint: "{{ lookup('amazon.aws.aws_secret', 'bento/{{ project_name }}/{{ tier }}.sumo_collector_endpoint', nested=true, region='us-east-1' ) }}"
    sumo_collector_token: "{{ lookup('amazon.aws.aws_secret', 'bento/{{ project_name }}/{{ tier }}.sumo_collector_token_file_validator', nested=true, region='us-east-1' ) }}"
    mongo_db_host: "{{ lookup('amazon.aws.aws_secret', 'bento/{{ project_name }}/{{ tier }}.mongo_db_host', nested=true, region='us-east-1' ) }}"
    mongo_db_port: "{{ lookup('amazon.aws.aws_secret', 'bento/{{ project_name }}/{{ tier }}.mongo_db_port', nested=true, region='us-east-1' ) }}"
    mongo_db_password: "{{ lookup('amazon.aws.aws_secret', 'bento/{{ project_name }}/{{ tier }}.mongo_db_password', nested=true, region='us-east-1' ) }}"
    mongo_db_user: "{{ lookup('amazon.aws.aws_secret', 'bento/{{ project_name }}/{{ tier }}.mongo_db_user', nested=true, region='us-east-1' ) }}"
    database_name: "{{ lookup('amazon.aws.aws_secret', 'bento/{{ project_name }}/{{ tier }}.database_name', nested=true, region='us-east-1' ) }}"
#    crdcsubnet: "{{ lookup('amazon.aws.aws_secret', 'bento/{{ project_name }}/{{ tier }}.crdcsubnet', nested=true, region='us-east-1' ) }}"
#    crdcsecurity: "{{ lookup('amazon.aws.aws_secret', 'bento/{{ project_name }}/{{ tier }}.crdcsecurity', nested=true, region='us-east-1' ) }}"
    crdcsubnet:
      "{{ tier }}":
        subnet1: "subnet-409a0424"
        subnet2: "subnet-4f35f112"
    crdcsecurity:
      dev:
        value: "sg-0af2d5ce75ffc8cfe"
    container_memory: 1024
    container_cpu: 512
    container_env:
      - name: SESSION_SECRET
        value: "abcd256asghaaamnkloofghj"
      - name: PROJECT
        value: "{{ project_name }}"
      - name: VERSION
        value: "{{ image_version }}"
      - name: TIER
        value: "{{ tier }}"
      - name: MONGO_DB_HOST
        value: "{{ mongo_db_host }}"
      - name: MONGO_DB_PORT
        value: "{{ mongo_db_port }}"
      - name: MONGO_DB_PASSWORD
        value: "{{ mongo_db_password }}"
      - name: MONGO_DB_USER
        value: "{{ mongo_db_user }}"
      - name: DATABASE_NAME
        value: "{{ database_name }}"
      - name: LOADER_QUEUE
        value: "{{ project_name }}-{{ tier }}-loader-queue.fifo"
      - name: FILE_QUEUE
        value: "{{ project_name }}-{{ tier }}-file-queue.fifo"
      - name: METADATA_QUEUE
        value: "{{ project_name }}-{{ tier }}-metadata-queue.fifo"
        
  tasks:
    - name: Get the current caller identity information
      aws_caller_info:
      register: caller_info

    - name: set ECR registry name
      set_fact:
        ecr_repo: "{{ caller_info.account }}.dkr.ecr.{{ region }}.amazonaws.com"
        account: "{{ caller_info.account }}"
    #install collections
    - name: install aws collection
      command: ansible-galaxy collection install {{item}}
      loop:
        - amazon.aws
        - community.aws:<=3.2.0

    - name: create task definition
      community.aws.ecs_taskdefinition:
        containers:
          - name: sumologic-firelens
            essential: true
            image: "public.ecr.aws/aws-observability/aws-for-fluent-bit:stable"
            firelensConfiguration:
              type: fluentbit
              options:
                enable-ecs-log-metadata: "true"
          - name: newrelic-infra
            essential: true
            image: "newrelic/nri-ecs:1.9.2"
            environment:
              - name: NRIA_OVERRIDE_HOST_ROOT
                value: ""
              - name: NRIA_IS_FORWARD_ONLY
                value: "true"
              - name: NEW_RELIC_APP_NAME
                value: "{{ service_name }}"
              - name: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED
                value: "true"
              - name: NEW_RELIC_HOST
                value: "gov-collector.newrelic.com"
              - name: FARGATE
                value: "true"
              - name: NRIA_PASSTHROUGH_ENVIRONMENT
                value: "ECS_CONTAINER_METADATA_URI,ECS_CONTAINER_METADATA_URI_V4,FARGATE"
              - name: NRIA_CUSTOM_ATTRIBUTES
                value: "{\"nrDeployMethod\":\"downloadPage\"}"
              - name: NRIA_LICENSE_KEY
                value: "{{ newrelic_license_key }}"
          - name: "{{ container_name }}"
            essential: true
            image: nginx:stable-alpine3.17-slim
            # image: "{{ container_image_url }}:{{ image_version }}"
            environment: "{{ container_env }}"
            entryPoint: "{% if container_entrypoint is defined %}{{ container_entrypoint }}{% else %}[]{% endif %}"
            logConfiguration:
              logDriver: awsfirelens
              options:
                Name: "http"
                Host: "{{ sumo_collector_endpoint }}"
                URI: "/receiver/v1/http/{{ sumo_collector_token }}"
                Port: "443"
                tls: "on"
                tls.verify: "off"
                Format: "json_lines"
                Retry_Limit: "2"
        launch_type: FARGATE
        network_mode: awsvpc
        execution_role_arn: "arn:aws:iam::{{ account }}:role/{{ execution_role }}"
        task_role_arn: "arn:aws:iam::{{ account }}:role/{{ task_role }}"
        family: "{{ service_name }}"
        memory: "{{ container_memory }}"
        cpu: "{{ container_cpu }}"
        state: present
        force_create: true
        region: "{{ region }}"
      register: task_output

    ############################################################################################################################
    #     Task Definition Queries
    ############################################################################################################################
    - name: query task definition - {{ container_name }}
      ecs_taskdefinition_info:
        task_definition: "{{ service_name }}"
        region: "{{ region }}"
      register: task

    - name: set facts
      set_fact:
        task_revision: "{{ task.revision }}"
        task_name: "{{ task.family }}"

    - name: RUN a task on Fargate
      ecs_task:
        count: 1
        operation: run
        cluster: "{{ ecs_cluster_name }}"
        task_definition: "{{ task_name }}"
        started_by: vdonkor
        launch_type: FARGATE
        region: "{{ region }}"
        network_configuration:
          subnets:
          - "{{ crdcsubnet[tier]['subnet1'] }}"
          - "{{ crdcsubnet[tier1]['subnet2'] }}"
          security_groups:
          - "{{ crdcsecurity['dev']['value'] }}"
          # - my_security_group
      register: task_output
